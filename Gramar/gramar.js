/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[5,7,22,23,24,25,26],$V7=[8,20],$V8=[1,17],$V9=[1,25],$Va=[1,34],$Vb=[1,44],$Vc=[1,36],$Vd=[1,37],$Ve=[1,47],$Vf=[1,46],$Vg=[1,49],$Vh=[1,48],$Vi=[1,52],$Vj=[1,53],$Vk=[1,50],$Vl=[1,51],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[16,18],$Vu=[8,12,15,22,23,24,25,26,32,34,41,44,51,64,65,66,69,70,71,72,73,74,75,76,77],$Vv=[41,50,51,52,53,55,56,57,58,59,60,61,62,63,65,66],$Vw=[2,76],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[16,18,21,29,41,50,51,52,53,55,56,57,58,59,60,61,62,63,65,66,68],$VN=[1,98],$VO=[1,113],$VP=[18,29],$VQ=[2,85],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,138],$VW=[16,18,21,29,50,51,52,53,55,56,57,58,59,60,61,62,63,68],$VX=[16,18,21,29,50,51,56,57,58,59,60,61,62,63,68],$VY=[2,38],$VZ=[1,153],$V_=[1,154],$V$=[16,18,21,29,56,57,58,59,62,63,68],$V01=[16,18,21,29,56,57,58,59,60,61,62,63,68],$V11=[1,164];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"FUNCION_BLOQUE":6,"void":7,"id":8,"PARAMETROS_SENTENCIA":9,"llaveizq":10,"INSTRUCCIONES":11,"llavedec":12,"TIPO":13,"main":14,"parizq":15,"pardec":16,"LISTPARAMETROS":17,"coma":18,"PARAMETRO":19,"corizq":20,"cordec":21,"string":22,"int":23,"double":24,"char":25,"boolean":26,"INSTRUCCION":27,"DECLARACIONVARIABLE":28,"ptcoma":29,"ASIGNACION_BLOQUE":30,"PRINT_BLOQUE":31,"print":32,"EXPRESION":33,"println":34,"ARITMETICA":35,"RELACIONAL":36,"LOGICA":37,"TERNARIO":38,"TOINT_STATEMENT":39,"UNARIA":40,"punto":41,"length":42,"PRIMITIVO":43,"ID":44,"PARIZQ":45,"LISTEXPRESIONES":46,"touppercase":47,"tolowercase":48,"tostring":49,"mas":50,"menos":51,"multiplicacion":52,"division":53,"XPRESION":54,"modulo":55,"menor":56,"mayor":57,"menorigual":58,"mayorigual":59,"igualigual":60,"diferente":61,"or":62,"and":63,"negacion":64,"incremento":65,"decremento":66,"ternario":67,"dspuntos":68,"toint":69,"todouble":70,"entero":71,"decimal":72,"caracter":73,"cadena":74,"true":75,"false":76,"null":77,"LISTAIDS":78,"igual":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"void",8:"id",10:"llaveizq",12:"llavedec",14:"main",15:"parizq",16:"pardec",18:"coma",20:"corizq",21:"cordec",22:"string",23:"int",24:"double",25:"char",26:"boolean",29:"ptcoma",32:"print",34:"println",41:"punto",42:"length",44:"ID",45:"PARIZQ",47:"touppercase",48:"tolowercase",49:"tostring",50:"mas",51:"menos",52:"multiplicacion",53:"division",54:"XPRESION",55:"modulo",56:"menor",57:"mayor",58:"menorigual",59:"mayorigual",60:"igualigual",61:"diferente",62:"or",63:"and",64:"negacion",65:"incremento",66:"decremento",67:"ternario",68:"dspuntos",69:"toint",70:"todouble",71:"entero",72:"decimal",73:"caracter",74:"cadena",75:"true",76:"false",77:"null",79:"igual"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[6,7],[9,3],[9,2],[17,3],[17,1],[19,2],[19,4],[19,2],[19,4],[13,1],[13,1],[13,1],[13,1],[13,1],[11,2],[11,1],[27,2],[27,2],[27,2],[31,4],[31,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[33,5],[33,1],[33,3],[33,4],[33,3],[33,5],[33,6],[33,5],[33,5],[33,6],[33,4],[33,2],[33,5],[33,5],[46,3],[46,1],[35,3],[35,3],[35,3],[35,3],[35,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[37,3],[37,3],[37,2],[37,2],[40,2],[40,2],[40,2],[40,2],[38,7],[39,4],[39,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[28,2],[28,4],[28,4],[28,2],[78,3],[78,1],[30,3],[30,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 20:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]); 
break;
case 3: case 21: case 27: case 28: case 29: case 30: case 31: case 32: case 35: case 85:
 this.$ = $$[$0]; 
break;
case 4: case 5: case 7: case 22: case 23: case 24: case 33: case 45:
 this.$ = $$[$0-1]; 
break;
case 6: case 36: case 38:
 this.$ = $$[$0-2]; 
break;
case 8:
 this.$ = []; 
break;
case 9: case 48:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 10: case 49:
 this.$ = []; this.$.push($$[$0]); 
break;
case 11: case 13:
 this.$ = $$[$0-1]; console.log("Parametro"); 
break;
case 12: case 14:
 this.$ = $$[$0-3]; console.log("Parametro"); 
break;
case 15: case 16: case 17: case 18: case 19:
 this.$ = $$[$0]; console.log("Tipo"); 
break;
case 25:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 26:
 this.$ = []; console.log("Imprime"); 
break;
case 34: case 39: case 41: case 42: case 46: case 47:
 this.$ = $$[$0-4]; 
break;
case 37: case 44:
 this.$ = $$[$0-3]; 
break;
case 40: case 43:
 this.$ = $$[$0-5]; 
break;
case 50:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'+', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 51:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'-', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 52:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'*', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 53:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'/', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 54:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'%', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 55:
 this.$ = $$[$0-2]; console.log("menor"); 
break;
case 56:
 this.$ = $$[$0-2]; console.log("mayor"); 
break;
case 57:
 this.$ = $$[$0-2]; console.log("menorigual"); 
break;
case 58:
 this.$ = $$[$0-2]; console.log("mayorigual"); 
break;
case 59:
 this.$ = $$[$0-2]; console.log("igualigual"); 
break;
case 60:
 this.$ = $$[$0-2]; console.log("diferente"); 
break;
case 61:
 this.$ = $$[$0-2]; console.log("or"); 
break;
case 62:
 this.$ = $$[$0-2]; console.log("and"); 
break;
case 63:
 this.$ = $$[$0-1]; console.log("negado"); 
break;
case 64:
 this.$ = $$[$0-1]; console.log("negacion"); 
break;
case 65: case 66: case 67: case 68:
 this.$ = $$[$0-1]; console.log("unaria"); 
break;
case 69:
 this.$ = $$[$0-6]; console.log("ternario"); 
break;
case 70:
 this.$ = $$[$0-3]; console.log("toInt"); 
break;
case 71:
 this.$ = $$[$0-3]; console.log("toDouble"); 
break;
case 72: case 73:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 74: case 75:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 76:
this.$ = $$[$0]; console.log("id");
break;
case 77:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 78:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 79:
this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = []; console.log("lista ids") 
break;
case 81:
 this.$ = []; console.log("declaracion con valor"); 
break;
case 82:
 this.$ = []; console.log("declaracion con valor de una instancia"); 
break;
case 83:
 this.$ = []; console.log("lista ids de una instancia"); 
break;
case 84:
 this.$ =$$[$0-2]; 
break;
case 86:
this.$ = []; console.log("asignacion valor") 
break;
case 87:
this.$ = []; console.log("asignacion valor de instancia"); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,13:5,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{1:[3]},{5:[1,11],6:12,7:$V0,13:5,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},o($V6,[2,3]),{8:[1,13],14:[1,14]},{8:[1,15]},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),{1:[2,1]},o($V6,[2,2]),{9:16,15:$V8},{15:[1,18]},{9:19,15:$V8},{10:[1,20]},{8:$V9,13:24,16:[1,22],17:21,19:23,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{16:[1,26]},{10:[1,27]},{8:$Va,11:28,13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{16:[1,61],18:[1,62]},{10:[2,8]},o($Vt,[2,10]),{8:[1,63],20:[1,64]},{8:[1,65],20:[1,66]},{10:[1,67]},{8:$Va,11:68,13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$Va,12:[1,69],13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:70,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($Vu,[2,21]),{29:[1,71]},{29:[1,72]},{29:[1,73]},{8:[1,75],78:74},o($Vv,$Vw,{78:77,8:[1,76],79:[1,78]}),{41:[1,79],50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{15:[1,95]},{15:[1,96]},o($VM,[2,27]),o($VM,[2,28]),o($VM,[2,29]),o($VM,[2,30]),o($VM,[2,31]),o($VM,[2,32]),{8:$VN,15:$Vb,33:97,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,[2,35]),{20:[1,100],45:[1,99]},{8:[1,101]},{8:$VN,15:$Vb,33:102,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:103,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{15:[1,104]},{15:[1,105]},{8:$VN,15:$Vb,33:106,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:107,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),{10:[2,7]},{8:$V9,13:24,19:108,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},o($Vt,[2,11]),{21:[1,109]},o($Vt,[2,13]),{21:[1,110]},{8:$Va,11:111,13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$Va,12:[1,112],13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:70,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($V6,[2,4]),o($Vu,[2,20]),o($Vu,[2,22]),o($Vu,[2,23]),o($Vu,[2,24]),{18:$VO,29:[2,80]},o($VP,$VQ,{79:[1,114]}),o($VP,$VQ,{79:[1,115]}),{18:$VO,29:[2,83]},{8:$VN,15:$Vb,33:116,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:[1,117],42:$VR,47:$VS,48:$VT,49:$VU},{8:$VN,15:$Vb,33:122,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:123,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:124,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{54:[1,125]},{8:$VN,15:$Vb,33:126,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:127,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:128,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:129,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:130,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:131,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:132,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:133,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:134,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,[2,67]),o($VM,[2,68]),{8:$VN,15:$Vb,33:135,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:136,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{16:[1,137],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($VM,$Vw),{8:$VN,15:$Vb,16:[1,139],33:141,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,46:140,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:142,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,[2,45],{20:[1,143]}),o($VW,[2,63],{41:$VV,65:$VK,66:$VL}),o($VX,[2,64],{41:$VV,52:$Vz,53:$VA,55:$VB,65:$VK,66:$VL}),{8:$VN,15:$Vb,33:144,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:145,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VW,[2,65],{41:$VV,65:$VK,66:$VL}),o([16,18,21,29,50,51,52,53,55,56,57,58,59,60,61,62,63,65,68],[2,66],{41:$VV,66:$VL}),o($Vt,[2,9]),{8:[1,146]},{8:[1,147]},{8:$Va,12:[1,148],13:33,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:70,28:30,30:31,31:32,32:$Vc,33:35,34:$Vd,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($V6,[2,5]),{8:[1,149]},{8:$VN,15:$Vb,33:150,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:151,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{29:[2,86],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($Vv,$VY,{15:$VZ,20:$V_,79:[1,152]}),{15:[1,155]},{15:[1,156]},{15:[1,157]},{15:[1,158]},o($VX,[2,50],{41:$VV,52:$Vz,53:$VA,55:$VB,65:$VK,66:$VL}),o($VX,[2,51],{41:$VV,52:$Vz,53:$VA,55:$VB,65:$VK,66:$VL}),o($VW,[2,52],{41:$VV,65:$VK,66:$VL}),o($VM,[2,53]),o($VW,[2,54],{41:$VV,65:$VK,66:$VL}),o($V$,[2,55],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,60:$VG,61:$VH,65:$VK,66:$VL}),o($V$,[2,56],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,60:$VG,61:$VH,65:$VK,66:$VL}),o($V$,[2,57],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,60:$VG,61:$VH,65:$VK,66:$VL}),o($V$,[2,58],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,60:$VG,61:$VH,65:$VK,66:$VL}),o($V01,[2,59],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,65:$VK,66:$VL}),o($V01,[2,60],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,65:$VK,66:$VL}),o([16,18,21,29,62,68],[2,61],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,63:$VJ,65:$VK,66:$VL}),o([16,18,21,29,62,63,68],[2,62],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,65:$VK,66:$VL}),{16:[1,159],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{16:[1,160],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($VM,[2,33],{67:[1,161]}),{8:[1,162],42:$VR,47:$VS,48:$VT,49:$VU},o($VM,[2,36]),{16:[1,163],18:$V11},o($Vt,[2,49],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL}),{21:[1,165],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{8:$VN,15:$Vb,33:166,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{16:[1,167],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{16:[1,168],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($Vt,[2,12]),o($Vt,[2,14]),o($V6,[2,6]),o($VP,[2,84]),{29:[2,81],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{29:[2,82],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},{8:$VN,15:$Vb,33:169,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,16:[1,170],33:141,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,46:171,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{8:$VN,15:$Vb,33:172,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},{16:[1,173]},{16:[1,174]},{16:[1,175]},{16:[1,176]},{29:[2,25]},{29:[2,26]},{8:$VN,15:$Vb,33:177,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,$VY,{15:$VZ,20:$V_}),o($VM,[2,37]),{8:$VN,15:$Vb,33:178,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o($VM,[2,44]),{21:[1,179],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($VM,[2,70]),o($VM,[2,71]),{29:[2,87],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($VM,[2,39]),{16:[1,180],18:$V11},{21:[1,181],41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL},o($VM,[2,34]),o($VM,[2,41]),o($VM,[2,42]),o($VM,[2,47]),{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL,68:[1,182]},o($Vt,[2,48],{41:$VV,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VK,66:$VL}),o($VM,[2,46]),o($VM,[2,40]),o($VM,[2,43]),{8:$VN,15:$Vb,33:183,35:38,36:39,37:40,38:41,39:42,40:43,41:$Ve,43:45,44:$Vf,51:$Vg,64:$Vh,65:$Vi,66:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs},o([16,18,21,29,50,51,52,53,55,56,57,58,59,60,61,62,63,65,66,68],[2,69],{41:$VV})],
defaultActions: {11:[2,1],22:[2,8],61:[2,7],159:[2,25],160:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitivo} = require("../Clases/Expresiones/Primitivo");
    const {Print} = require("../Clases/Instrucciones/Print");
    const {Aritmetica} = require("../Clases/Expresiones/Operaciones/Aritmetica");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 72       // NUMERICO
break;
case 4:return 71
break;
case 5:return 65
break;
case 6:return 66
break;
case 7:return 'concat'
break;
case 8:return 'repit'
break;
case 9:return 50           //ARITEMETICO
break;
case 10:return 51
break;
case 11:return 52
break;
case 12:return 53
break;
case 13:return 55
break;
case 14:return 58   // LOGICO
break;
case 15:return 59
break;
case 16:return 61
break;
case 17:return 60
break;
case 18:return 57
break;
case 19:return 56
break;
case 20:return 67   //TERNARIO
break;
case 21:return 68
break;
case 22:return 41
break;
case 23:return 10   //GRAMATICO
break;
case 24:return 12
break;
case 25:return 15
break;
case 26:return 16
break;
case 27:return 20
break;
case 28:return 21
break;
case 29:return 29
break;
case 30:return 18
break;
case 31:return 79
break;
case 32:return 62        //RELACIONAL
break;
case 33:return 63
break;
case 34:return 64
break;
case 35:return 73
break;
case 36:return 74
break;
case 37:return 23      //TIPOS
break;
case 38:return 24
break;
case 39:return 25
break;
case 40:return 26
break;
case 41:return 22
break;
case 42:return 75
break;
case 43:return 76
break;
case 44:return 'pow'     //NATIVAS
break;
case 45:return 'sin'
break;
case 46:return 'cos'
break;
case 47:return 'tan'
break;
case 48:return 'sqrt'
break;
case 49:return 'log'
break;
case 50:return 32
break;
case 51:return 34
break;
case 52:return 'parse'
break;
case 53:return 69
break;
case 54:return 70
break;
case 55:return 'typeof'
break;
case 56:return 'if'
break;
case 57:return 'else'
break;
case 58:return 'switch'
break;
case 59:return 'case'
break;
case 60:return 'default'
break;
case 61:return 'break'
break;
case 62:return 'continue'
break;
case 63:return 'while'
break;
case 64:return 'do'
break;
case 65:return 'for'
break;
case 66:return 'in'
break;
case 67:return 42
break;
case 68:return 'substring'
break;
case 69:return 'caracterposition'
break;
case 70:return 7
break;
case 71:return 'return'
break;
case 72:return 14
break;
case 73:return 77
break;
case 74:return 'struct'
break;
case 75:return 47
break;
case 76:return 48
break;
case 77:return 49
break;
case 78:return 8
break;
case 79:return 5
break;
case 80: console.log("error lexico"); 
break;
}
},
rules: [/^(?:[ \r\t\n]+)/i,/^(?:\/\/.([^\n])*)/i,/^(?:\/\*(.?\n?)*\*\/)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[\'\‘\’].[\'\’\‘])/i,/^(?:[\"\“\”](([^\"\“\”\\])*([\\].)*)*[\"\“\”])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:pow\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:sqrt\b)/i,/^(?:log10\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:parse\b)/i,/^(?:toInt\b)/i,/^(?:toDouble\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:length\b)/i,/^(?:subString\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:main\b)/i,/^(?:null\b)/i,/^(?:struct\b)/i,/^(?:toUpperCase\b)/i,/^(?:toLowerCase\b)/i,/^(?:toString\b)/i,/^(?:[A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramar;
exports.Parser = gramar.Parser;
exports.parse = function () { return gramar.parse.apply(gramar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}