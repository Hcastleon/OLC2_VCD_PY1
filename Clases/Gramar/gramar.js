/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[5,7,8,22,23,24,25,26],$V8=[8,20,53],$V9=[1,19],$Va=[1,28],$Vb=[1,47],$Vc=[1,68],$Vd=[1,49],$Ve=[1,50],$Vf=[1,70],$Vg=[1,73],$Vh=[1,80],$Vi=[1,81],$Vj=[1,82],$Vk=[1,83],$Vl=[1,74],$Vm=[1,75],$Vn=[1,76],$Vo=[1,77],$Vp=[1,78],$Vq=[1,79],$Vr=[1,72],$Vs=[1,57],$Vt=[1,58],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,51],$VC=[1,52],$VD=[1,56],$VE=[1,53],$VF=[1,54],$VG=[1,55],$VH=[1,59],$VI=[16,18],$VJ=[8,12,15,22,23,24,25,26,41,43,53,57,69,70,71,72,73,74,75,76,77,78,87,88,89,92,93,94,95,96,97,98,101,103,107,108,109,110,111,112,114],$VK=[53,56,57,58,59,60,61,62,79,80,81,82,83,84,85,86,90],$VL=[2,45],$VM=[2,51],$VN=[1,110],$VO=[1,111],$VP=[2,96],$VQ=[1,115],$VR=[1,113],$VS=[1,114],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,120],$VX=[1,121],$VY=[1,122],$VZ=[1,123],$V_=[1,124],$V$=[1,125],$V01=[1,126],$V11=[1,127],$V21=[1,128],$V31=[1,129],$V41=[1,130],$V51=[1,131],$V61=[1,132],$V71=[1,142],$V81=[10,16,18,21,29,53,56,57,58,59,60,61,62,79,80,81,82,83,84,85,86,90,91],$V91=[18,29],$Va1=[1,175],$Vb1=[1,176],$Vc1=[1,177],$Vd1=[1,178],$Ve1=[1,179],$Vf1=[1,203],$Vg1=[10,16,18,21,29,56,57,58,59,60,79,80,81,82,83,84,85,86,90,91],$Vh1=[10,16,18,21,29,56,57,79,80,81,82,83,84,85,86,90,91],$Vi1=[10,16,18,21,29,56,57,58,59,60,61,62,79,80,81,82,83,84,85,86,90,91],$Vj1=[10,16,18,21,29,79,80,81,82,85,86,90,91],$Vk1=[10,16,18,21,29,79,80,81,82,83,84,85,86,90,91],$Vl1=[1,274],$Vm1=[12,107,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"FUNCION_BLOQUE":6,"void":7,"id":8,"PARAMETROS_SENTENCIA":9,"llaveizq":10,"INSTRUCCIONES":11,"llavedec":12,"TIPO":13,"main":14,"parizq":15,"pardec":16,"LISTPARAMETROS":17,"coma":18,"PARAMETRO":19,"corizq":20,"cordec":21,"string":22,"int":23,"double":24,"char":25,"boolean":26,"INSTRUCCION":27,"DECLARACIONVARIABLE":28,"ptcoma":29,"ASIGNACION_BLOQUE":30,"PRINT_BLOQUE":31,"SENTENCIA_IF":32,"SENTENCIA_SWITCH":33,"SENTENCIA_FOR":34,"SENTENCIA_WHILE":35,"SENTENCIA_DOWHILE":36,"SENTENCIA_BREAK":37,"UNARIA":38,"SENTENCIA_RETURN":39,"LLAMADA":40,"print":41,"EXPRESION":42,"println":43,"ARITMETICA":44,"CADENAS":45,"RELACIONAL":46,"LOGICA":47,"TERNARIO":48,"NATIVAS":49,"NAT_CAD":50,"NAT_FUN":51,"PRIMITIVO":52,"punto":53,"SENTENCIA_TERNARIO":54,"LISTEXPRESIONES":55,"mas":56,"menos":57,"multiplicacion":58,"division":59,"modulo":60,"concat":61,"repit":62,"caracterposition":63,"substring":64,"length":65,"touppercase":66,"tolowercase":67,"parse":68,"toint":69,"todouble":70,"typeof":71,"tostring":72,"pow":73,"sin":74,"cos":75,"tan":76,"sqrt":77,"log":78,"menor":79,"mayor":80,"menorigual":81,"mayorigual":82,"igualigual":83,"diferente":84,"or":85,"and":86,"negacion":87,"incremento":88,"decremento":89,"ternario":90,"dspuntos":91,"entero":92,"decimal":93,"caracter":94,"cadena":95,"true":96,"false":97,"null":98,"LISTAIDS":99,"igual":100,"if":101,"else":102,"switch":103,"LISTACASE":104,"SENTENCIA_DEFAULT":105,"SENTENCIA_CASE":106,"case":107,"default":108,"break":109,"for":110,"while":111,"do":112,"LISTAEXPRESIONES":113,"return":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"void",8:"id",10:"llaveizq",12:"llavedec",14:"main",15:"parizq",16:"pardec",18:"coma",20:"corizq",21:"cordec",22:"string",23:"int",24:"double",25:"char",26:"boolean",29:"ptcoma",41:"print",43:"println",53:"punto",56:"mas",57:"menos",58:"multiplicacion",59:"division",60:"modulo",61:"concat",62:"repit",63:"caracterposition",64:"substring",65:"length",66:"touppercase",67:"tolowercase",68:"parse",69:"toint",70:"todouble",71:"typeof",72:"tostring",73:"pow",74:"sin",75:"cos",76:"tan",77:"sqrt",78:"log",79:"menor",80:"mayor",81:"menorigual",82:"mayorigual",83:"igualigual",84:"diferente",85:"or",86:"and",87:"negacion",88:"incremento",89:"decremento",90:"ternario",91:"dspuntos",92:"entero",93:"decimal",94:"caracter",95:"cadena",96:"true",97:"false",98:"null",100:"igual",101:"if",102:"else",103:"switch",107:"case",108:"default",109:"break",110:"for",111:"while",112:"do",114:"return"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[6,6],[6,7],[9,3],[9,2],[17,3],[17,1],[19,2],[19,4],[19,2],[19,4],[13,1],[13,1],[13,1],[13,1],[13,1],[11,2],[11,1],[27,2],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[31,4],[31,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,3],[42,1],[42,2],[42,5],[42,1],[42,1],[55,3],[55,1],[44,3],[44,3],[44,3],[44,3],[44,3],[45,3],[45,3],[50,6],[50,8],[50,5],[50,5],[50,5],[51,6],[51,4],[51,4],[51,4],[51,4],[49,6],[49,4],[49,4],[49,4],[49,4],[49,4],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[47,3],[47,3],[47,2],[47,2],[38,2],[38,2],[38,2],[38,2],[48,7],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[28,2],[28,4],[99,3],[99,1],[30,3],[30,5],[32,7],[32,11],[32,9],[33,8],[33,7],[104,2],[104,1],[106,4],[105,3],[37,1],[54,5],[34,11],[35,5],[36,9],[40,3],[40,4],[113,3],[113,1],[39,2],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 21:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 3: case 26: case 27: case 28: case 29: case 30: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 47: case 50: case 51:
 this.$ = $$[$0]; 
break;
case 4:
 this.$= new Funcion(3, new Tipo('VOID'), $$[$0-4], $$[$0-3], true, $$[$0-1], _$[$0-5].first_line, _$[$0-5].last_column); 
break;
case 5:
 this.$= new Funcion(3, $$[$0-5], $$[$0-4], $$[$0-3], false, $$[$0-1], _$[$0-5].first_line, _$[$0-5].last_column); 
break;
case 6: case 7: case 8: case 23: case 24: case 25: case 31: case 32: case 33: case 34: case 46: case 48:
 this.$ = $$[$0-1]; 
break;
case 9:
 this.$ = []; 
break;
case 10: case 52: case 122:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 11: case 53: case 123:
 this.$ = []; this.$.push($$[$0]); 
break;
case 12: case 14:
 this.$ = $$[$0-1]; console.log("Parametro"); 
break;
case 13: case 15:
 this.$ = $$[$0-3]; console.log("Parametro"); 
break;
case 16:
 this.$ = new Tipo('STRING'); 
break;
case 17:
 this.$ = new Tipo('ENTERO'); 
break;
case 18:
 this.$ = new Tipo('DECIMAL');
break;
case 19:
 this.$ = new Tipo('CHAR'); 
break;
case 20:
 this.$ = new Tipo('BOOLEAN'); 
break;
case 22: case 112:
 this.$ = [$$[$0]]; 
break;
case 35:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 36:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 49:
 this.$ = $$[$0-4]; 
break;
case 54:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'+', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 55:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'-', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 56:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'*', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 57:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'/', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 58:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'%', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 59:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'&', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 60:
 this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'^', _$[$0-2].first_line,_$[$0-2].last_column);
break;
case 61:
 this.$ = new Cadenas($$[$0-5], $$[$0-1], null ,'caracterposition', _$[$0-5].first_line,_$[$0-5].last_column);
break;
case 62:
 this.$ = new Cadenas($$[$0-7], $$[$0-3], $$[$0-1] ,'substring', _$[$0-7].first_line,_$[$0-7].last_column);
break;
case 63:
 this.$ = new Cadenas($$[$0-4], null, null ,'length', _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 64:
 this.$ = new Cadenas($$[$0-4], null, null ,'touppercase', _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 65:
 this.$ = new Cadenas($$[$0-4], null, null ,'tolowercase', _$[$0-4].first_line,_$[$0-4].last_column);
break;
case 66:
 this.$ = $$[$0-5]; console.log("parse"); 
break;
case 67: case 68: case 69: case 70:
 this.$ = $$[$0-3]; console.log("parse"); 
break;
case 71:
 this.$ = new Nativa($$[$0-3], $$[$0-1], false ,'pow', _$[$0-5].first_line,_$[$0-5].last_column);
break;
case 72:
 this.$ = new Nativa($$[$0-1], null, true , 'sin',_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 73:
 this.$ = new Nativa($$[$0-1], null, true , 'cos',_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 74:
 this.$ = new Nativa($$[$0-1], null, true , 'tan',_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 75:
 this.$ = new Nativa($$[$0-1], null, true , 'sqrt',_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 76:
 this.$ = new Nativa($$[$0-1], null, true , 'log',_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 77:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'<', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 78:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'>', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 79:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'<=', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 80:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'>=', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 81:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'==', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 82:
 this.$ = new Relacionales($$[$0-2], $$[$0], false ,'!=', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 83:
 this.$ = new Logicas($$[$0-2], $$[$0], false ,'||', _$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 84:
 this.$ = new Logicas($$[$0-2], $$[$0], false ,'&&', _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 85:
 this.$ = new Logicas($$[$0], null, true , '!',_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 86:
 this.$ = new Aritmetica($$[$0], null, true , 'UNARIO',_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 87:
 this.$ = new Asignacion($$[$0], new Aritmetica(new Identificador($$[$0], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '+',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
break;
case 88:
 this.$ = new Asignacion($$[$0], new Aritmetica(new Identificador($$[$0], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '-',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
break;
case 89:
 this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '+',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
break;
case 90:
 this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '-',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
break;
case 91:
 this.$ = $$[$0-6]; console.log("ternario"); 
break;
case 92: case 93:
this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 94: case 95:
this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 96:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].last_column);
break;
case 97:
this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
break;
case 98:
this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
break;
case 99:
this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column);  
break;
case 101:
 this.$ = new Declaracion($$[$0-3], [new Simbolos(1,null, $$[$0-2], $$[$0])], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 102:
$$[$0-2].push(new Simbolos(1,null, $$[$0], null)); this.$ = $$[$0-2]; 
break;
case 103:
 this.$ = [new Simbolos(1,null, $$[$0], null)]; 
break;
case 104:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);  
break;
case 105:
this.$ = []; console.log("asignacion valor de instancia"); 
break;
case 106:
 this.$ = new If( $$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column ); 
break;
case 107:
 this.$ = new If( $$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column ); 
break;
case 108:
 this.$ = new If( $$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column ); 
break;
case 109:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 110:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 111:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 113:
this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column); 
break;
case 114:
 this.$ =new Default($$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 115:
 this.$ = new Break(); 
break;
case 116:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 117:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 118:
 this.$ = new While( $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].last_column);  
break;
case 119:
 this.$ = new DoWhile($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 120:
 this.$ = new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 121:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 124:
 this.$ = new Return($$[$0]);
break;
case 125:
 this.$ = new Return(null);
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:$V1,13:5,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},{1:[3]},{5:[1,12],6:13,7:$V0,8:$V1,13:5,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},o($V7,[2,3]),{8:[1,14],14:[1,15]},{8:[1,16]},{8:[1,17]},o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),{1:[2,1]},o($V7,[2,2]),{9:18,15:$V9},{15:[1,20]},{9:21,15:$V9},{9:22,15:$V9},{10:[1,23]},{8:$Va,13:27,16:[1,25],17:24,19:26,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},{16:[1,29]},{10:[1,30]},{10:[1,31]},{8:$Vb,11:32,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{16:[1,91],18:[1,92]},{10:[2,9]},o($VI,[2,11]),{8:[1,93],20:[1,94]},{8:[1,95],20:[1,96]},{10:[1,97]},{8:$Vb,11:98,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,11:99,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,12:[1,100],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($VJ,[2,22]),{29:[1,102]},{29:[1,103]},{29:[1,104]},o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,29]),o($VJ,[2,30]),{29:[1,105]},o($VK,$VL,{29:[1,106]}),{29:[1,107]},o($VK,$VM,{29:[1,108]}),{8:$VN,53:$VO,99:109},o($VK,$VP,{15:$VQ,88:$VR,89:$VS,100:[1,112]}),{53:[1,116],56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{15:[1,133]},{15:[1,134]},{15:[1,135]},{15:[1,136]},{15:[1,137]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:138,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{10:[1,143]},{29:[2,115]},{8:[1,144]},{8:[1,145]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,29:[2,125],38:139,40:140,42:146,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,37]),o($V81,[2,38]),o($V81,[2,39]),o($V81,[2,40]),o($V81,[2,41]),o($V81,[2,42]),o($V81,[2,43]),o($V81,[2,44]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:147,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,47]),{8:[1,148]},o($V81,[2,50]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:149,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:150,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{15:[1,151]},{15:[1,152]},{15:[1,153]},{15:[1,154]},{15:[1,155]},{15:[1,156]},{15:[1,157]},{15:[1,158]},{15:[1,159]},{15:[1,160]},o($V81,[2,92]),o($V81,[2,93]),o($V81,[2,94]),o($V81,[2,95]),o($V81,[2,97]),o($V81,[2,98]),o($V81,[2,99]),{10:[2,8]},{8:$Va,13:27,19:161,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},o($VI,[2,12]),{21:[1,162]},o($VI,[2,14]),{21:[1,163]},{8:$Vb,11:164,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,12:[1,165],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,12:[1,166],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($V7,[2,4]),o($VJ,[2,21]),o($VJ,[2,23]),o($VJ,[2,24]),o($VJ,[2,25]),o($VJ,[2,31]),o($VJ,[2,32]),o($VJ,[2,33]),o($VJ,[2,34]),{18:[1,167],29:[2,100]},o($V91,[2,103],{100:[1,168]}),{68:[1,169]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:170,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,89]),o($V81,[2,90]),{8:$V71,13:141,15:$Vc,16:[1,171],22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:173,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,113:172},{8:[1,174],63:$Va1,64:$Vb1,65:$Vc1,66:$Vd1,67:$Ve1},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:180,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:181,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:182,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:183,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:184,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:185,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:186,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:187,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:188,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:189,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:190,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:191,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:192,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:193,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:194,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:195,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:196,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:197,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:198,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:199,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{13:201,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,28:200},{10:[1,202],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($V81,$VL),o($V81,$VM),{53:$VO},o($V81,$VP,{15:$VQ,88:$VR,89:$VS}),{8:$Vb,11:204,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($V81,[2,87]),o($V81,[2,88]),{29:[2,124],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,205],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($V81,[2,48],{20:[1,206]}),o($Vg1,[2,85],{53:$Vf1,61:$VY,62:$VZ}),o($Vh1,[2,86],{53:$Vf1,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:207,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:208,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:209,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:210,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:211,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:212,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:213,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:214,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:215,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:216,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($VI,[2,10]),{8:[1,217]},{8:[1,218]},{8:$Vb,12:[1,219],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($V7,[2,5]),o($V7,[2,6]),{8:[1,220]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:221,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{15:[1,222]},{29:[2,104],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($V81,[2,120]),{16:[1,223],18:[1,224]},o($VI,[2,123],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61}),{100:[1,225]},{15:[1,226]},{15:[1,227]},{15:[1,228]},{15:[1,229]},{15:[1,230]},o($Vh1,[2,54],{53:$Vf1,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),o($Vh1,[2,55],{53:$Vf1,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),o($Vg1,[2,56],{53:$Vf1,61:$VY,62:$VZ}),o($Vg1,[2,57],{53:$Vf1,61:$VY,62:$VZ}),o($Vg1,[2,58],{53:$Vf1,61:$VY,62:$VZ}),o([10,16,18,21,29,56,57,58,59,60,61,79,80,81,82,83,84,85,86,90,91],[2,59],{53:$Vf1,62:$VZ}),o($Vi1,[2,60],{53:$Vf1}),o($Vj1,[2,77],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,83:$V21,84:$V31}),o($Vj1,[2,78],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,83:$V21,84:$V31}),o($Vj1,[2,79],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,83:$V21,84:$V31}),o($Vj1,[2,80],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,83:$V21,84:$V31}),o($Vk1,[2,81],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),o($Vk1,[2,82],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ}),o([10,16,18,21,29,85,90,91],[2,83],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,86:$V51}),o([10,16,18,21,29,85,86,90,91],[2,84],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31}),{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61,91:[1,231]},{16:[1,232],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,233],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,234],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,235],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{29:[1,236]},{8:$VN,99:109},{8:$Vb,11:237,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{63:$Va1,64:$Vb1,65:$Vc1,66:$Vd1,67:$Ve1},{8:$Vb,12:[1,238],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($V81,[2,46]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:240,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{18:[1,241],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,242],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,243],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,244],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,245],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,246],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,247],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,248],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,249],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,250],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($VI,[2,13]),o($VI,[2,15]),o($V7,[2,7]),o($V91,[2,102]),{29:[2,101],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:251,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,121]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:252,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:253,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:254,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:255,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{16:[1,256]},{16:[1,257]},{16:[1,258]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:259,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{29:[2,35]},{29:[2,36]},{10:[1,260]},{10:[1,261]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:262,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$Vb,12:[1,263],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{111:[1,264]},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:265,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{21:[1,266],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:267,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,72]),o($V81,[2,73]),o($V81,[2,74]),o($V81,[2,75]),o($V81,[2,76]),o($V81,[2,67]),o($V81,[2,68]),o($V81,[2,69]),o($V81,[2,70]),{16:[1,268],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($VI,[2,122],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61}),{29:[2,105],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,269],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{18:[1,270],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($V81,[2,63]),o($V81,[2,64]),o($V81,[2,65]),o([10,16,18,21,29,91],[2,116],{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61}),{8:$Vb,11:271,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{104:272,106:273,107:$Vl1},{29:[1,275],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($VJ,[2,118]),{15:[1,276]},{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61,91:[1,277]},o($V81,[2,49]),{16:[1,278],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($V81,[2,66]),o($V81,[2,61]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:279,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$Vb,12:[1,280],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{12:[1,282],105:281,106:283,107:$Vl1,108:[1,284]},o($Vm1,[2,112]),{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:285,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:286,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:287,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},{8:$V71,13:141,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,38:139,40:140,42:288,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA},o($V81,[2,71]),{16:[1,289],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($VJ,[2,106],{102:[1,290]}),{12:[1,291]},o($VJ,[2,110]),o($Vm1,[2,111]),{91:[1,292]},{53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61,91:[1,293]},{16:[1,294],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},{16:[1,295],53:$Vf1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,90:$V61},o($Vi1,[2,91],{53:$Vf1}),o($V81,[2,62]),{10:[1,296],32:297,101:$VB},o($VJ,[2,109]),{8:$Vb,11:298,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,11:299,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{10:[1,300]},{29:[1,301]},{8:$Vb,11:302,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($VJ,[2,108]),{8:$Vb,12:[2,114],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($Vm1,[2,113],{28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,13:46,42:48,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,54:71,27:101,8:$Vb,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,41:$Vd,43:$Ve,53:$Vf,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH}),{8:$Vb,11:303,13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:33,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($VJ,[2,119]),{8:$Vb,12:[1,304],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},{8:$Vb,12:[1,305],13:46,15:$Vc,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:101,28:34,30:35,31:36,32:37,33:38,34:39,35:40,36:41,37:42,38:43,39:44,40:45,41:$Vd,42:48,43:$Ve,44:60,45:61,46:62,47:63,48:64,49:65,50:66,51:67,52:69,53:$Vf,54:71,57:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,87:$Vr,88:$Vs,89:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,101:$VB,103:$VC,109:$VD,110:$VE,111:$VF,112:$VG,114:$VH},o($VJ,[2,107]),o($VJ,[2,117])],
defaultActions: {12:[2,1],25:[2,9],56:[2,115],91:[2,8],232:[2,35],233:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitivo} = require("../Expresiones/Primitivo");
    const {Print} = require("../Instrucciones/Print");
    const {Println} = require("../Instrucciones/Println");
    const {Aritmetica} = require("../Expresiones/Operaciones/Aritmetica");
    const {Nativa} = require("../Expresiones/Operaciones/Nativa");
    const {Cadenas} = require("../Expresiones/Operaciones/Cadenas");
    const {Relacionales} = require("../Expresiones/Operaciones/Relacionales");
    const {Logicas} = require("../Expresiones/Operaciones/Logicas");
    const {Declaracion} = require("../Instrucciones/Declaracion");
    const {Asignacion} = require("../Instrucciones/Asignacion");
    const {Simbolos} = require("../TablaSimbolos/Simbolos");
    const {Tipo} = require("../TablaSimbolos/Tipo");
    const {Identificador} = require("../Expresiones/Identificador");
    const {If} = require("../Instrucciones/Control/If");
    const {Switch} = require("../Instrucciones/Control/Switch");
    const {Case} = require("../Instrucciones/Control/Case");
    const {Default} = require("../Instrucciones/Control/Default");
    const {Break} = require("../Instrucciones/Transferencia/Break");
    const {Ternario} = require("../Expresiones/Ternario");
    const {For} = require("../Instrucciones/Ciclica/For");
    const {While} = require("../Instrucciones/Ciclica/While");
    const {DoWhile} = require("../Instrucciones/Ciclica/DoWhile");
    const {Funcion} = require("../Instrucciones/Funcion");
    const {Llamada} = require("../Instrucciones/Llamada");
    const {Return} = require("../Instrucciones/Transferencia/Return");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 93       // NUMERICO
break;
case 4:return 92
break;
case 5:return 85        //RELACIONAL
break;
case 6:return 86
break;
case 7:return 88
break;
case 8:return 89
break;
case 9:return 61
break;
case 10:return 62
break;
case 11:return 56           //ARITEMETICO
break;
case 12:return 57
break;
case 13:return 58
break;
case 14:return 59
break;
case 15:return 60
break;
case 16:return 81   // LOGICO
break;
case 17:return 82
break;
case 18:return 84
break;
case 19:return 83
break;
case 20:return 80
break;
case 21:return 79
break;
case 22:return 87
break;
case 23:return 90   //TERNARIO
break;
case 24:return 91
break;
case 25:return 53
break;
case 26:return 10   //GRAMATICO
break;
case 27:return 12
break;
case 28:return 15
break;
case 29:return 16
break;
case 30:return 20
break;
case 31:return 21
break;
case 32:return 29
break;
case 33:return 18
break;
case 34:return 100
break;
case 35: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
break;
case 36: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 95; 
break;
case 37:return 72
break;
case 38:return 23      //TIPOS
break;
case 39:return 24
break;
case 40:return 25
break;
case 41:return 26
break;
case 42:return 22
break;
case 43:return 96
break;
case 44:return 97
break;
case 45:return 73     //NATIVAS
break;
case 46:return 74
break;
case 47:return 75
break;
case 48:return 76
break;
case 49:return 77
break;
case 50:return 78
break;
case 51:return 41
break;
case 52:return 43
break;
case 53:return 68
break;
case 54:return 69
break;
case 55:return 70
break;
case 56:return 71
break;
case 57:return 101
break;
case 58:return 102
break;
case 59:return 103
break;
case 60:return 107
break;
case 61:return 108
break;
case 62:return 109
break;
case 63:return 'continue'
break;
case 64:return 111
break;
case 65:return 112
break;
case 66:return 110
break;
case 67:return 'in'
break;
case 68:return 65
break;
case 69:return 64
break;
case 70:return 63
break;
case 71:return 7
break;
case 72:return 114
break;
case 73:return 14
break;
case 74:return 98
break;
case 75:return 'struct'
break;
case 76:return 66
break;
case 77:return 67
break;
case 78:return 8
break;
case 79:return 5
break;
case 80: console.log("error lexico"); 
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:\/\/.([^\n])*)/,/^(?:\/\*(.?\n?)*\*\/)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&)/,/^(?:\^)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:!=)/,/^(?:==)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[\'\‘\’].[\'\’\‘])/,/^(?:[\"\“\”](([^\"\“\”\\])*([\\].)*)*[\"\“\”])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:length\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:null\b)/,/^(?:struct\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:[A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramar;
exports.Parser = gramar.Parser;
exports.parse = function () { return gramar.parse.apply(gramar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}