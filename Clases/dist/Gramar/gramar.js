/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramar = (function(){
    var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[5,7,22,23,24,25,26],$V7=[8,20,52],$V8=[1,17],$V9=[1,25],$Va=[1,41],$Vb=[1,61],$Vc=[1,43],$Vd=[1,44],$Ve=[1,63],$Vf=[1,66],$Vg=[1,73],$Vh=[1,74],$Vi=[1,75],$Vj=[1,76],$Vk=[1,67],$Vl=[1,68],$Vm=[1,69],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[1,65],$Vr=[1,51],$Vs=[1,52],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,45],$VB=[1,46],$VC=[1,50],$VD=[1,47],$VE=[1,48],$VF=[1,49],$VG=[16,18],$VH=[8,12,15,22,23,24,25,26,39,41,52,55,67,68,69,70,71,72,73,74,75,76,85,86,87,90,91,92,93,94,95,96,99,101,105,106,107,108,109,110],$VI=[52,54,55,56,57,58,59,60,77,78,79,80,81,82,83,84,88],$VJ=[2,42],$VK=[1,100],$VL=[1,101],$VM=[2,95],$VN=[1,105],$VO=[1,106],$VP=[1,103],$VQ=[1,104],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[1,112],$VW=[1,113],$VX=[1,114],$VY=[1,115],$VZ=[1,116],$V_=[1,117],$V$=[1,118],$V01=[1,119],$V11=[1,120],$V21=[1,121],$V31=[1,122],$V41=[1,123],$V51=[1,131],$V61=[10,16,18,21,29,52,54,55,56,57,58,59,60,77,78,79,80,81,82,83,84,88,89],$V71=[18,29],$V81=[1,164],$V91=[1,165],$Va1=[1,166],$Vb1=[1,167],$Vc1=[1,168],$Vd1=[1,192],$Ve1=[10,16,18,21,29,54,55,56,57,58,77,78,79,80,81,82,83,84,88,89],$Vf1=[10,16,18,21,29,54,55,77,78,79,80,81,82,83,84,88,89],$Vg1=[10,16,18,21,29,54,55,56,57,58,59,60,77,78,79,80,81,82,83,84,88,89],$Vh1=[10,16,18,21,29,77,78,79,80,83,84,88,89],$Vi1=[10,16,18,21,29,77,78,79,80,81,82,83,84,88,89],$Vj1=[1,264],$Vk1=[12,105,106];
    var parser = {trace: function trace () { },
    yy: {},
    symbols_: {"error":2,"INICIO":3,"CONTENIDO":4,"EOF":5,"FUNCION_BLOQUE":6,"void":7,"id":8,"PARAMETROS_SENTENCIA":9,"llaveizq":10,"INSTRUCCIONES":11,"llavedec":12,"TIPO":13,"main":14,"parizq":15,"pardec":16,"LISTPARAMETROS":17,"coma":18,"PARAMETRO":19,"corizq":20,"cordec":21,"string":22,"int":23,"double":24,"char":25,"boolean":26,"INSTRUCCION":27,"DECLARACIONVARIABLE":28,"ptcoma":29,"ASIGNACION_BLOQUE":30,"PRINT_BLOQUE":31,"SENTENCIA_IF":32,"SENTENCIA_SWITCH":33,"SENTENCIA_FOR":34,"SENTENCIA_WHILE":35,"SENTENCIA_DOWHILE":36,"SENTENCIA_BREAK":37,"UNARIA":38,"print":39,"EXPRESION":40,"println":41,"ARITMETICA":42,"CADENAS":43,"RELACIONAL":44,"LOGICA":45,"TERNARIO":46,"NATIVAS":47,"NAT_CAD":48,"NAT_FUN":49,"PRIMITIVO":50,"LISTEXPRESIONES":51,"punto":52,"SENTENCIA_TERNARIO":53,"mas":54,"menos":55,"multiplicacion":56,"division":57,"modulo":58,"concat":59,"repit":60,"caracterposition":61,"substring":62,"length":63,"touppercase":64,"tolowercase":65,"parse":66,"toint":67,"todouble":68,"typeof":69,"tostring":70,"pow":71,"sin":72,"cos":73,"tan":74,"sqrt":75,"log":76,"menor":77,"mayor":78,"menorigual":79,"mayorigual":80,"igualigual":81,"diferente":82,"or":83,"and":84,"negacion":85,"incremento":86,"decremento":87,"ternario":88,"dspuntos":89,"entero":90,"decimal":91,"caracter":92,"cadena":93,"true":94,"false":95,"null":96,"LISTAIDS":97,"igual":98,"if":99,"else":100,"switch":101,"LISTACASE":102,"SENTENCIA_DEFAULT":103,"SENTENCIA_CASE":104,"case":105,"default":106,"break":107,"for":108,"while":109,"do":110,"$accept":0,"$end":1},
    terminals_: {2:"error",5:"EOF",7:"void",8:"id",10:"llaveizq",12:"llavedec",14:"main",15:"parizq",16:"pardec",18:"coma",20:"corizq",21:"cordec",22:"string",23:"int",24:"double",25:"char",26:"boolean",29:"ptcoma",39:"print",41:"println",52:"punto",54:"mas",55:"menos",56:"multiplicacion",57:"division",58:"modulo",59:"concat",60:"repit",61:"caracterposition",62:"substring",63:"length",64:"touppercase",65:"tolowercase",66:"parse",67:"toint",68:"todouble",69:"typeof",70:"tostring",71:"pow",72:"sin",73:"cos",74:"tan",75:"sqrt",76:"log",77:"menor",78:"mayor",79:"menorigual",80:"mayorigual",81:"igualigual",82:"diferente",83:"or",84:"and",85:"negacion",86:"incremento",87:"decremento",88:"ternario",89:"dspuntos",90:"entero",91:"decimal",92:"caracter",93:"cadena",94:"true",95:"false",96:"null",98:"igual",99:"if",100:"else",101:"switch",105:"case",106:"default",107:"break",108:"for",109:"while",110:"do"},
    productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[6,7],[9,3],[9,2],[17,3],[17,1],[19,2],[19,4],[19,2],[19,4],[13,1],[13,1],[13,1],[13,1],[13,1],[11,2],[11,1],[27,2],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[31,4],[31,4],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,3],[40,1],[40,3],[40,4],[40,4],[40,2],[40,5],[40,1],[51,3],[51,1],[42,3],[42,3],[42,3],[42,3],[42,3],[43,3],[43,3],[48,6],[48,8],[48,5],[48,5],[48,5],[49,6],[49,4],[49,4],[49,4],[49,4],[47,6],[47,4],[47,4],[47,4],[47,4],[47,4],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[45,3],[45,3],[45,2],[45,2],[38,2],[38,2],[38,2],[38,2],[46,7],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[28,2],[28,4],[97,3],[97,1],[30,3],[30,5],[32,7],[32,11],[32,9],[33,8],[33,7],[102,2],[102,1],[104,4],[103,3],[37,1],[53,5],[34,11],[35,5],[36,9]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
    /* this == yyval */
    
    var $0 = $$.length - 1;
    switch (yystate) {
    case 1:
     this.$ = $$[$0-1]; return this.$; 
    break;
    case 2: case 20:
     $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
    break;
    case 3: case 25: case 26: case 27: case 28: case 29: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 44: case 50:
     this.$ = $$[$0]; 
    break;
    case 4: case 5: case 6: case 7: case 22: case 23: case 24: case 30: case 31: case 43: case 48:
     this.$ = $$[$0-1]; 
    break;
    case 8:
     this.$ = []; 
    break;
    case 9: case 51:
     this.$ = $$[$0-2]; this.$.push($$[$0]); 
    break;
    case 10: case 52:
     this.$ = []; this.$.push($$[$0]); 
    break;
    case 11: case 13:
     this.$ = $$[$0-1]; console.log("Parametro"); 
    break;
    case 12: case 14:
     this.$ = $$[$0-3]; console.log("Parametro"); 
    break;
    case 15:
     this.$ = new Tipo('STRING'); 
    break;
    case 16:
     this.$ = new Tipo('ENTERO'); 
    break;
    case 17:
     this.$ = new Tipo('DECIMAL');
    break;
    case 18:
     this.$ = new Tipo('CHAR'); 
    break;
    case 19:
     this.$ = new Tipo('BOOLEAN'); 
    break;
    case 21: case 111:
     this.$ = [$$[$0]]; 
    break;
    case 32:
     this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ); 
    break;
    case 33:
     this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column ); 
    break;
    case 45:
     this.$ = $$[$0-2]; 
    break;
    case 46: case 47:
     this.$ = $$[$0-3]; 
    break;
    case 49:
     this.$ = $$[$0-4]; 
    break;
    case 53:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'+', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 54:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'-', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 55:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'*', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 56:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'/', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 57:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'%', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 58:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'&', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 59:
     this.$ = new Aritmetica($$[$0-2], $$[$0], false ,'^', _$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 60:
     this.$ = new Cadenas($$[$0-5], $$[$0-1], null ,'caracterposition', _$[$0-5].first_line,_$[$0-5].last_column);
    break;
    case 61:
     this.$ = new Cadenas($$[$0-7], $$[$0-3], $$[$0-1] ,'substring', _$[$0-7].first_line,_$[$0-7].last_column);
    break;
    case 62:
     this.$ = new Cadenas($$[$0-4], null, null ,'length', _$[$0-4].first_line,_$[$0-4].last_column);
    break;
    case 63:
     this.$ = new Cadenas($$[$0-4], null, null ,'touppercase', _$[$0-4].first_line,_$[$0-4].last_column);
    break;
    case 64:
     this.$ = new Cadenas($$[$0-4], null, null ,'tolowercase', _$[$0-4].first_line,_$[$0-4].last_column);
    break;
    case 65:
     this.$ = $$[$0-5]; console.log("parse"); 
    break;
    case 66: case 67: case 68: case 69:
     this.$ = $$[$0-3]; console.log("parse"); 
    break;
    case 70:
     this.$ = new Nativa($$[$0-3], $$[$0-1], false ,'pow', _$[$0-5].first_line,_$[$0-5].last_column);
    break;
    case 71:
     this.$ = new Nativa($$[$0-1], null, true , 'sin',_$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 72:
     this.$ = new Nativa($$[$0-1], null, true , 'cos',_$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 73:
     this.$ = new Nativa($$[$0-1], null, true , 'tan',_$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 74:
     this.$ = new Nativa($$[$0-1], null, true , 'sqrt',_$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 75:
     this.$ = new Nativa($$[$0-1], null, true , 'log',_$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 76:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'<', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 77:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'>', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 78:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'<=', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 79:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'>=', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 80:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'==', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 81:
     this.$ = new Relacionales($$[$0-2], $$[$0], false ,'!=', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 82:
     this.$ = new Logicas($$[$0-2], $$[$0], false ,'||', _$[$0-2].first_line,_$[$0-2].last_column); 
    break;
    case 83:
     this.$ = new Logicas($$[$0-2], $$[$0], false ,'&&', _$[$0-2].first_line, _$[$0-2].last_column);
    break;
    case 84:
     this.$ = new Logicas($$[$0], null, true , '!',_$[$0-1].first_line, _$[$0-1].last_column); 
    break;
    case 85:
     this.$ = new Aritmetica($$[$0], null, true , 'UNARIO',_$[$0-1].first_line, _$[$0-1].last_column); 
    break;
    case 86:
     this.$ = new Asignacion($$[$0], new Aritmetica(new Identificador($$[$0], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '+',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
    break;
    case 87:
     this.$ = new Asignacion($$[$0], new Aritmetica(new Identificador($$[$0], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '-',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
    break;
    case 88:
     this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '+',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
    break;
    case 89:
     this.$ = new Asignacion($$[$0-1], new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Primitivo(1, _$[$0-1].first_line, _$[$0-1].last_column),false, '-',  _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line, _$[$0-1].last_column);
    break;
    case 90:
     this.$ = $$[$0-6]; console.log("ternario"); 
    break;
    case 91: case 92:
    this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
    break;
    case 93: case 94:
    this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
    break;
    case 95:
    this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].last_column);
    break;
    case 96:
    this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
    break;
    case 97:
    this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
    break;
    case 98:
    this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
    break;
    case 99:
     this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column);  
    break;
    case 100:
     this.$ = new Declaracion($$[$0-3], [new Simbolos(1,null, $$[$0-2], $$[$0])], _$[$0-3].first_line, _$[$0-3].last_column); 
    break;
    case 101:
    $$[$0-2].push(new Simbolos(1,null, $$[$0], null)); this.$ = $$[$0-2]; 
    break;
    case 102:
     this.$ = [new Simbolos(1,null, $$[$0], null)]; 
    break;
    case 103:
    this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);  
    break;
    case 104:
    this.$ = []; console.log("asignacion valor de instancia"); 
    break;
    case 105:
     this.$ = new If( $$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column ); 
    break;
    case 106:
     this.$ = new If( $$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column ); 
    break;
    case 107:
     this.$ = new If( $$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column ); 
    break;
    case 108:
     this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
    break;
    case 109:
     this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].last_column); 
    break;
    case 110:
     $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
    break;
    case 112:
    this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column); 
    break;
    case 113:
     this.$ =new Default($$[$0],_$[$0-2].first_line,_$[$0-2].last_column);
    break;
    case 114:
     this.$ = new Break(); 
    break;
    case 115:
     this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
    break;
    case 116:
     this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
    break;
    case 117:
     this.$ = new While( $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].last_column);  
    break;
    case 118:
     this.$ = new DoWhile($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column); 
    break;
    }
    },
    table: [{3:1,4:2,6:3,7:$V0,13:5,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{1:[3]},{5:[1,11],6:12,7:$V0,13:5,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},o($V6,[2,3]),{8:[1,13],14:[1,14]},{8:[1,15]},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),{1:[2,1]},o($V6,[2,2]),{9:16,15:$V8},{15:[1,18]},{9:19,15:$V8},{10:[1,20]},{8:$V9,13:24,16:[1,22],17:21,19:23,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{16:[1,26]},{10:[1,27]},{8:$Va,11:28,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{16:[1,84],18:[1,85]},{10:[2,8]},o($VG,[2,10]),{8:[1,86],20:[1,87]},{8:[1,88],20:[1,89]},{10:[1,90]},{8:$Va,11:91,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{8:$Va,12:[1,92],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($VH,[2,21]),{29:[1,94]},{29:[1,95]},{29:[1,96]},o($VH,[2,25]),o($VH,[2,26]),o($VH,[2,27]),o($VH,[2,28]),o($VH,[2,29]),{29:[1,97]},o($VI,$VJ,{29:[1,98]}),{8:$VK,52:$VL,97:99},o($VI,$VM,{15:$VN,20:$VO,86:$VP,87:$VQ,98:[1,102]}),{52:[1,107],54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{15:[1,124]},{15:[1,125]},{15:[1,126]},{15:[1,127]},{15:[1,128]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:129,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{10:[1,133]},{29:[2,114]},{8:[1,134]},{8:[1,135]},o($V61,[2,34]),o($V61,[2,35]),o($V61,[2,36]),o($V61,[2,37]),o($V61,[2,38]),o($V61,[2,39]),o($V61,[2,40]),o($V61,[2,41]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:136,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,44]),{8:[1,137]},o($V61,[2,50]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:138,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:139,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{15:[1,140]},{15:[1,141]},{15:[1,142]},{15:[1,143]},{15:[1,144]},{15:[1,145]},{15:[1,146]},{15:[1,147]},{15:[1,148]},{15:[1,149]},o($V61,[2,91]),o($V61,[2,92]),o($V61,[2,93]),o($V61,[2,94]),o($V61,[2,96]),o($V61,[2,97]),o($V61,[2,98]),{10:[2,7]},{8:$V9,13:24,19:150,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},o($VG,[2,11]),{21:[1,151]},o($VG,[2,13]),{21:[1,152]},{8:$Va,11:153,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{8:$Va,12:[1,154],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($V6,[2,4]),o($VH,[2,20]),o($VH,[2,22]),o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,30]),o($VH,[2,31]),{18:[1,155],29:[2,99]},o($V71,[2,102],{98:[1,156]}),{66:[1,157]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:158,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,88]),o($V61,[2,89]),{8:$V51,13:132,15:$Vb,16:[1,159],22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:161,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,51:160,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:162,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:[1,163],61:$V81,62:$V91,63:$Va1,64:$Vb1,65:$Vc1},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:169,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:170,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:171,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:172,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:173,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:174,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:175,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:176,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:177,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:178,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:179,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:180,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:181,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:182,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:183,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:184,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:185,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:186,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:187,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:188,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{13:190,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,28:189},{10:[1,191],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($V61,$VJ),o($V61,$VM,{15:$VN,20:$VO,86:$VP,87:$VQ}),{52:$VL},{8:$Va,11:193,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($V61,[2,86]),o($V61,[2,87]),{16:[1,194],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($V61,[2,48],{20:[1,195]}),o($Ve1,[2,84],{52:$Vd1,59:$VW,60:$VX}),o($Vf1,[2,85],{52:$Vd1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:196,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:197,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:198,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:199,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:200,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:201,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:202,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:203,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:204,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:205,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($VG,[2,9]),{8:[1,206]},{8:[1,207]},{8:$Va,12:[1,208],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($V6,[2,5]),{8:[1,209]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:210,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{15:[1,211]},{29:[2,103],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($V61,[2,45]),{16:[1,212],18:[1,213]},o($VG,[2,52],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41}),{21:[1,214],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{98:[1,215]},{15:[1,216]},{15:[1,217]},{15:[1,218]},{15:[1,219]},{15:[1,220]},o($Vf1,[2,53],{52:$Vd1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vf1,[2,54],{52:$Vd1,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Ve1,[2,55],{52:$Vd1,59:$VW,60:$VX}),o($Ve1,[2,56],{52:$Vd1,59:$VW,60:$VX}),o($Ve1,[2,57],{52:$Vd1,59:$VW,60:$VX}),o([10,16,18,21,29,54,55,56,57,58,59,77,78,79,80,81,82,83,84,88,89],[2,58],{52:$Vd1,60:$VX}),o($Vg1,[2,59],{52:$Vd1}),o($Vh1,[2,76],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,81:$V01,82:$V11}),o($Vh1,[2,77],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,81:$V01,82:$V11}),o($Vh1,[2,78],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,81:$V01,82:$V11}),o($Vh1,[2,79],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,81:$V01,82:$V11}),o($Vi1,[2,80],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vi1,[2,81],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([10,16,18,21,29,83,88,89],[2,82],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,84:$V31}),o([10,16,18,21,29,83,84,88,89],[2,83],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11}),{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41,89:[1,221]},{16:[1,222],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,223],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,224],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,225],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{29:[1,226]},{8:$VK,97:99},{8:$Va,11:227,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{61:$V81,62:$V91,63:$Va1,64:$Vb1,65:$Vc1},{8:$Va,12:[1,228],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($V61,[2,43]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:230,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{18:[1,231],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,232],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,233],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,234],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,235],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,236],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,237],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,238],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,239],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,240],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($VG,[2,12]),o($VG,[2,14]),o($V6,[2,6]),o($V71,[2,101]),{29:[2,100],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:241,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,46]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:242,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,47]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:243,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:244,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:245,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{16:[1,246]},{16:[1,247]},{16:[1,248]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:249,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{29:[2,32]},{29:[2,33]},{10:[1,250]},{10:[1,251]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:252,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$Va,12:[1,253],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{109:[1,254]},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:255,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{21:[1,256],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:257,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,71]),o($V61,[2,72]),o($V61,[2,73]),o($V61,[2,74]),o($V61,[2,75]),o($V61,[2,66]),o($V61,[2,67]),o($V61,[2,68]),o($V61,[2,69]),{16:[1,258],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($VG,[2,51],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41}),{29:[2,104],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,259],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{18:[1,260],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($V61,[2,62]),o($V61,[2,63]),o($V61,[2,64]),o([10,16,18,21,29,89],[2,115],{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41}),{8:$Va,11:261,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{102:262,104:263,105:$Vj1},{29:[1,265],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($VH,[2,117]),{15:[1,266]},{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41,89:[1,267]},o($V61,[2,49]),{16:[1,268],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($V61,[2,65]),o($V61,[2,60]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:269,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$Va,12:[1,270],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{12:[1,272],103:271,104:273,105:$Vj1,106:[1,274]},o($Vk1,[2,111]),{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:275,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:276,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:277,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},{8:$V51,13:132,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,38:130,40:278,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz},o($V61,[2,70]),{16:[1,279],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($VH,[2,105],{100:[1,280]}),{12:[1,281]},o($VH,[2,109]),o($Vk1,[2,110]),{89:[1,282]},{52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41,89:[1,283]},{16:[1,284],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},{16:[1,285],52:$Vd1,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,88:$V41},o($Vg1,[2,90],{52:$Vd1}),o($V61,[2,61]),{10:[1,286],32:287,99:$VA},o($VH,[2,108]),{8:$Va,11:288,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{8:$Va,11:289,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{10:[1,290]},{29:[1,291]},{8:$Va,11:292,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($VH,[2,107]),{8:$Va,12:[2,113],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($Vk1,[2,112],{28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,13:40,40:42,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,53:64,27:93,8:$Va,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,39:$Vc,41:$Vd,52:$Ve,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF}),{8:$Va,11:293,13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:29,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($VH,[2,118]),{8:$Va,12:[1,294],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},{8:$Va,12:[1,295],13:40,15:$Vb,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:93,28:30,30:31,31:32,32:33,33:34,34:35,35:36,36:37,37:38,38:39,39:$Vc,40:42,41:$Vd,42:53,43:54,44:55,45:56,46:57,47:58,48:59,49:60,50:62,52:$Ve,53:64,55:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,85:$Vq,86:$Vr,87:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,99:$VA,101:$VB,107:$VC,108:$VD,109:$VE,110:$VF},o($VH,[2,106]),o($VH,[2,116])],
    defaultActions: {11:[2,1],22:[2,8],50:[2,114],84:[2,7],222:[2,32],223:[2,33]},
    parseError: function parseError (str, hash) {
        if (hash.recoverable) {
            this.trace(str);
        } else {
            var error = new Error(str);
            error.hash = hash;
            throw error;
        }
    },
    parse: function parse(input) {
        var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        var lexer = Object.create(this.lexer);
        var sharedState = { yy: {} };
        for (var k in this.yy) {
            if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                sharedState.yy[k] = this.yy[k];
            }
        }
        lexer.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer;
        sharedState.yy.parser = this;
        if (typeof lexer.yylloc == 'undefined') {
            lexer.yylloc = {};
        }
        var yyloc = lexer.yylloc;
        lstack.push(yyloc);
        var ranges = lexer.options && lexer.options.ranges;
        if (typeof sharedState.yy.parseError === 'function') {
            this.parseError = sharedState.yy.parseError;
        } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
        }
        function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
        }
        _token_stack:
            var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
        var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
        while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol == 'undefined') {
                    symbol = lex();
                }
                action = table[state] && table[state][symbol];
            }
                        if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
            if (action[0] instanceof Array && action.length > 1) {
                throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
            }
            switch (action[0]) {
            case 1:
                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;
            case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = {
                    first_line: lstack[lstack.length - (len || 1)].first_line,
                    last_line: lstack[lstack.length - 1].last_line,
                    first_column: lstack[lstack.length - (len || 1)].first_column,
                    last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                    yyval._$.range = [
                        lstack[lstack.length - (len || 1)].range[0],
                        lstack[lstack.length - 1].range[1]
                    ];
                }
                r = this.performAction.apply(yyval, [
                    yytext,
                    yyleng,
                    yylineno,
                    sharedState.yy,
                    action[1],
                    vstack,
                    lstack
                ].concat(args));
                if (typeof r !== 'undefined') {
                    return r;
                }
                if (len) {
                    stack = stack.slice(0, -1 * len * 2);
                    vstack = vstack.slice(0, -1 * len);
                    lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
            case 3:
                return true;
            }
        }
        return true;
    }};
    
        const {Primitivo} = require("../Expresiones/Primitivo");
        const {Print} = require("../Instrucciones/Print");
        const {Println} = require("../Instrucciones/Println");
        const {Aritmetica} = require("../Expresiones/Operaciones/Aritmetica");
        const {Nativa} = require("../Expresiones/Operaciones/Nativa");
        const {Cadenas} = require("../Expresiones/Operaciones/Cadenas");
        const {Relacionales} = require("../Expresiones/Operaciones/Relacionales");
        const {Logicas} = require("../Expresiones/Operaciones/Logicas");
        const {Declaracion} = require("../Instrucciones/Declaracion");
        const {Asignacion} = require("../Instrucciones/Asignacion");
        const {Simbolos} = require("../TablaSimbolos/Simbolos");
        const {Tipo} = require("../TablaSimbolos/Tipo");
        const {Identificador} = require("../Expresiones/Identificador");
        const {If} = require("../Instrucciones/Control/If");
        const {Switch} = require("../Instrucciones/Control/Switch");
        const {Case} = require("../Instrucciones/Control/Case");
        const {Default} = require("../Instrucciones/Control/Default");
        const {Break} = require("../Instrucciones/Transferencia/Break");
        const {Ternario} = require("../Expresiones/Ternario");
        const {For} = require("../Instrucciones/Ciclica/For");
        const {While} = require("../Instrucciones/Ciclica/While");
        const {DoWhile} = require("../Instrucciones/Ciclica/DoWhile");
    /* generated by jison-lex 0.3.4 */
    var lexer = (function(){
    var lexer = ({
    
    EOF:1,
    
    parseError:function parseError(str, hash) {
            if (this.yy.parser) {
                this.yy.parser.parseError(str, hash);
            } else {
                throw new Error(str);
            }
        },
    
    // resets the lexer, sets new input
    setInput:function (input, yy) {
            this.yy = yy || this.yy || {};
            this._input = input;
            this._more = this._backtrack = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = '';
            this.conditionStack = ['INITIAL'];
            this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0
            };
            if (this.options.ranges) {
                this.yylloc.range = [0,0];
            }
            this.offset = 0;
            return this;
        },
    
    // consumes and returns one char from the input
    input:function () {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
            } else {
                this.yylloc.last_column++;
            }
            if (this.options.ranges) {
                this.yylloc.range[1]++;
            }
    
            this._input = this._input.slice(1);
            return ch;
        },
    
    // unshifts one char (or a string) into the input
    unput:function (ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
    
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            //this.yyleng -= len;
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
    
            if (lines.length - 1) {
                this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;
    
            this.yylloc = {
                first_line: this.yylloc.first_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.first_column,
                last_column: lines ?
                    (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                     + oldLines[oldLines.length - lines.length].length - lines[0].length :
                  this.yylloc.first_column - len
            };
    
            if (this.options.ranges) {
                this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            this.yyleng = this.yytext.length;
            return this;
        },
    
    // When called from action, caches matched text and appends it on next action
    more:function () {
            this._more = true;
            return this;
        },
    
    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    reject:function () {
            if (this.options.backtrack_lexer) {
                this._backtrack = true;
            } else {
                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                    text: "",
                    token: null,
                    line: this.yylineno
                });
    
            }
            return this;
        },
    
    // retain first n characters of the match
    less:function (n) {
            this.unput(this.match.slice(n));
        },
    
    // displays already matched input, i.e. for error messages
    pastInput:function () {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
        },
    
    // displays upcoming input, i.e. for error messages
    upcomingInput:function () {
            var next = this.match;
            if (next.length < 20) {
                next += this._input.substr(0, 20-next.length);
            }
            return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
        },
    
    // displays the character position where the lexing error occurred, i.e. for error messages
    showPosition:function () {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
        },
    
    // test the lexed token: return FALSE when not a match, otherwise return token
    test_match:function(match, indexed_rule) {
            var token,
                lines,
                backup;
    
            if (this.options.backtrack_lexer) {
                // save context
                backup = {
                    yylineno: this.yylineno,
                    yylloc: {
                        first_line: this.yylloc.first_line,
                        last_line: this.last_line,
                        first_column: this.yylloc.first_column,
                        last_column: this.yylloc.last_column
                    },
                    yytext: this.yytext,
                    match: this.match,
                    matches: this.matches,
                    matched: this.matched,
                    yyleng: this.yyleng,
                    offset: this.offset,
                    _more: this._more,
                    _input: this._input,
                    yy: this.yy,
                    conditionStack: this.conditionStack.slice(0),
                    done: this.done
                };
                if (this.options.ranges) {
                    backup.yylloc.range = this.yylloc.range.slice(0);
                }
            }
    
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno += lines.length;
            }
            this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: lines ?
                             lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                             this.yylloc.last_column + match[0].length
            };
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input) {
                this.done = false;
            }
            if (token) {
                return token;
            } else if (this._backtrack) {
                // recover context
                for (var k in backup) {
                    this[k] = backup[k];
                }
                return false; // rule action called reject() implying the next rule should be tested instead.
            }
            return false;
        },
    
    // return next match in input
    next:function () {
            if (this.done) {
                return this.EOF;
            }
            if (!this._input) {
                this.done = true;
            }
    
            var token,
                match,
                tempMatch,
                index;
            if (!this._more) {
                this.yytext = '';
                this.match = '';
            }
            var rules = this._currentRules();
            for (var i = 0; i < rules.length; i++) {
                tempMatch = this._input.match(this.rules[rules[i]]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                    match = tempMatch;
                    index = i;
                    if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rules[i]);
                        if (token !== false) {
                            return token;
                        } else if (this._backtrack) {
                            match = false;
                            continue; // rule action called reject() implying a rule MISmatch.
                        } else {
                            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                            return false;
                        }
                    } else if (!this.options.flex) {
                        break;
                    }
                }
            }
            if (match) {
                token = this.test_match(match, rules[index]);
                if (token !== false) {
                    return token;
                }
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
            }
            if (this._input === "") {
                return this.EOF;
            } else {
                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                    text: "",
                    token: null,
                    line: this.yylineno
                });
            }
        },
    
    // return next match that has a token
    lex:function lex () {
            var r = this.next();
            if (r) {
                return r;
            } else {
                return this.lex();
            }
        },
    
    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    begin:function begin (condition) {
            this.conditionStack.push(condition);
        },
    
    // pop the previously active lexer condition state off the condition stack
    popState:function popState () {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                return this.conditionStack.pop();
            } else {
                return this.conditionStack[0];
            }
        },
    
    // produce the lexer rule set which is active for the currently active lexer condition state
    _currentRules:function _currentRules () {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            } else {
                return this.conditions["INITIAL"].rules;
            }
        },
    
    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    topState:function topState (n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) {
                return this.conditionStack[n];
            } else {
                return "INITIAL";
            }
        },
    
    // alias for begin(condition)
    pushState:function pushState (condition) {
            this.begin(condition);
        },
    
    // return the number of states currently on the stack
    stateStackSize:function stateStackSize() {
            return this.conditionStack.length;
        },
    options: {"case-sensitive":true},
    performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var YYSTATE=YY_START;
    switch($avoiding_name_collisions) {
    case 0:
    break;
    case 1:
    break;
    case 2:
    break;
    case 3:return 91       // NUMERICO
    break;
    case 4:return 90
    break;
    case 5:return 83        //RELACIONAL
    break;
    case 6:return 84
    break;
    case 7:return 86
    break;
    case 8:return 87
    break;
    case 9:return 59
    break;
    case 10:return 60
    break;
    case 11:return 54           //ARITEMETICO
    break;
    case 12:return 55
    break;
    case 13:return 56
    break;
    case 14:return 57
    break;
    case 15:return 58
    break;
    case 16:return 79   // LOGICO
    break;
    case 17:return 80
    break;
    case 18:return 82
    break;
    case 19:return 81
    break;
    case 20:return 78
    break;
    case 21:return 77
    break;
    case 22:return 85
    break;
    case 23:return 88   //TERNARIO
    break;
    case 24:return 89
    break;
    case 25:return 52
    break;
    case 26:return 10   //GRAMATICO
    break;
    case 27:return 12
    break;
    case 28:return 15
    break;
    case 29:return 16
    break;
    case 30:return 20
    break;
    case 31:return 21
    break;
    case 32:return 29
    break;
    case 33:return 18
    break;
    case 34:return 98
    break;
    case 35: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 92; 
    break;
    case 36: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
    break;
    case 37:return 70
    break;
    case 38:return 23      //TIPOS
    break;
    case 39:return 24
    break;
    case 40:return 25
    break;
    case 41:return 26
    break;
    case 42:return 22
    break;
    case 43:return 94
    break;
    case 44:return 95
    break;
    case 45:return 71     //NATIVAS
    break;
    case 46:return 72
    break;
    case 47:return 73
    break;
    case 48:return 74
    break;
    case 49:return 75
    break;
    case 50:return 76
    break;
    case 51:return 39
    break;
    case 52:return 41
    break;
    case 53:return 66
    break;
    case 54:return 67
    break;
    case 55:return 68
    break;
    case 56:return 69
    break;
    case 57:return 99
    break;
    case 58:return 100
    break;
    case 59:return 101
    break;
    case 60:return 105
    break;
    case 61:return 106
    break;
    case 62:return 107
    break;
    case 63:return 'continue'
    break;
    case 64:return 109
    break;
    case 65:return 110
    break;
    case 66:return 108
    break;
    case 67:return 'in'
    break;
    case 68:return 63
    break;
    case 69:return 62
    break;
    case 70:return 61
    break;
    case 71:return 7
    break;
    case 72:return 'return'
    break;
    case 73:return 14
    break;
    case 74:return 96
    break;
    case 75:return 'struct'
    break;
    case 76:return 64
    break;
    case 77:return 65
    break;
    case 78:return 8
    break;
    case 79:return 5
    break;
    case 80: console.log("error lexico"); 
    break;
    }
    },
    rules: [/^(?:[ \r\t\n]+)/,/^(?:\/\/.([^\n])*)/,/^(?:\/\*(.?\n?)*\*\/)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&)/,/^(?:\^)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:!=)/,/^(?:==)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[\'\‘\’].[\'\’\‘])/,/^(?:[\"\“\”](([^\"\“\”\\])*([\\].)*)*[\"\“\”])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:log10\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:length\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:null\b)/,/^(?:struct\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:[A-Za-z_\ñ\Ñ][A-Za-z_0-9\ñ\Ñ]*)/,/^(?:$)/,/^(?:.)/],
    conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
    });
    return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
      this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
    })();
    
    
    if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = gramar;
    exports.Parser = gramar.Parser;
    exports.parse = function () { return gramar.parse.apply(gramar, arguments); };
    exports.main = function commonjsMain (args) {
        if (!args[1]) {
            console.log('Usage: '+args[0]+' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
      exports.main(process.argv.slice(1));
    }
    }